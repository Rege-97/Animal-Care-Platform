<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.animal.api.board.mapper.UserBoardMapper">
<select id="getAllBoards" parameterType="Map" resultType="com.animal.api.board.model.response.AllBoardListResponseDTO">
SELECT
    B.IDX,
    B.TITLE,
    IFNULL(U.NICKNAME, '탈퇴 회원') AS NICKNAME,
    B.CREATED_AT,
    B.VIEWS,
    COUNT(BL.IDX) AS LIKE_COUNT,
    B.REF,
    B.LEV,
    B.TURN 
FROM
    BOARDS B
LEFT JOIN USERS U ON B.USER_IDX = U.IDX
LEFT JOIN BOARD_LIKES BL ON B.IDX = BL.BOARD_IDX AND BL.IS_LIKE = 1
WHERE
    B.BOARD_TYPE_IDX = 2
GROUP BY
    B.IDX, B.TITLE, B.CREATED_AT, B.VIEWS, U.NICKNAME, B.REF, B.LEV, B.TURN
ORDER BY
    B.REF DESC,      
    B.TURN ASC       
LIMIT #{listSize} OFFSET #{cp}
</select>

<select id="searchBoards" parameterType="com.animal.api.board.model.request.BoardSearchRequestDTO" resultType="com.animal.api.board.model.response.AllBoardListResponseDTO">
SELECT
	B.IDX,
	B.TITLE,
	IFNULL(U.NICKNAME, '탈퇴 회원') AS NICKNAME,
	B.CREATED_AT,
	B.VIEWS,
	COUNT(BL.IDX) AS LIKE_COUNT,
	B.REF,
	B.LEV,
	B.TURN
FROM
	BOARDS B
LEFT JOIN USERS U ON
	B.USER_IDX = U.IDX
LEFT JOIN BOARD_LIKES BL ON
	B.IDX = BL.BOARD_IDX
	AND BL.IS_LIKE = 1
<where>
	B.BOARD_TYPE_IDX = 2

    <choose>
        <when test = "type == 'title' and keyword != null and keyword != ''">
			AND B.TITLE LIKE CONCAT('%', #{keyword}, '%')
        </when>
        <when test = "type == 'nickname' and keyword != null and keyword != ''">
            AND U.NICKNAME LIKE CONCAT('%', #{keyword}, '%')
        </when>
        <when test = "type == 'content' and keyword != null and keyword != ''">
            AND B.CONTENT LIKE CONCAT('%', #{keyword}, '%')
        </when>
        <when test = "(type == 'all' or type == null) and keyword != null and keyword != ''">
            AND (
                B.TITLE LIKE CONCAT('%', #{keyword}, '%')
                OR U.NICKNAME LIKE CONCAT('%', #{keyword}, '%')
                OR B.CONTENT LIKE CONCAT('%', #{keyword}, '%')
            )
        </when>
    </choose>
</where>
GROUP BY
    B.IDX, B.TITLE, B.CREATED_AT, B.VIEWS, U.NICKNAME, B.REF, B.LEV, B.TURN
ORDER BY
    B.REF DESC,
    B.TURN ASC
LIMIT #{listSize} OFFSET #{cp}
</select>

<select id="getMaxRef" resultType="int">
SELECT
	IFNULL(MAX(REF), 0)
FROM
	BOARDS
</select>

<insert id="addBoard" parameterType="com.animal.api.board.model.request.BoardWriteRequestDTO" useGeneratedKeys="true" keyProperty="idx">
INSERT
	INTO
	BOARDS(USER_IDX, BOARD_TYPE_IDX, TITLE, CONTENT, REF, LEV, TURN)
VALUES(#{userIdx},2,#{title},#{content},#{ref},0,0)
</insert>

<select id="getBoardDetail" parameterType="int" resultType="com.animal.api.board.model.response.BoardDetailResponseDTO">
SELECT
	B.IDX,
	B.USER_IDX,
	IFNULL(U.NICKNAME, '탈퇴 회원') AS NICKNAME,
	B.TITLE,
	B.CONTENT,
	B.CREATED_AT,
	B.VIEWS,
	COUNT(BL.IDX) AS LIKE_COUNT
FROM
	BOARDS B
LEFT JOIN USERS U ON
	B.USER_IDX = U.IDX
LEFT JOIN BOARD_LIKES BL ON
	B.IDX = BL.BOARD_IDX
	AND BL.IS_LIKE = 1
WHERE
	B.BOARD_TYPE_IDX = 2
	AND B.IDX =	#{idx}
GROUP BY
	B.IDX,
	B.USER_IDX,
	U.NICKNAME,
	B.TITLE,
	B.CONTENT,
	B.CREATED_AT,
	B.VIEWS
</select>

<update id="updateBoardViews" parameterType="int">
UPDATE
	BOARDS
SET
	VIEWS = VIEWS + 1
WHERE
	IDX = #{idx} 
</update>

<update id="updateBoard" parameterType="com.animal.api.board.model.request.BoardUpdateRequestDTO">
UPDATE
	BOARDS
SET
	TITLE =	#{title},
	CONTENT = #{content}
WHERE
	IDX = #{idx}
	AND USER_IDX = #{userIdx}
</update>

<select id="checkMyBoard" parameterType="int" resultType="Integer">
SELECT
	USER_IDX
FROM
	BOARDS
WHERE
	IDX = #{idx}
</select>

<delete id="deleteBoard" parameterType="int">
DELETE
FROM
	BOARDS
WHERE
	IDX = #{idx}
</delete>
</mapper>